# ############################################################################
# **    Proyecto       : Proyecto con Tk de la Presentación Grafos
# **    Plataforma     : Python
# **    Herramienta    : Visual Studio Code
# **    Compilador     : IDLE Python
# **    Fecha/Hora     : 23-06-2025, 16:00 pm
# **    Descripción    : Proyecto de ejemplo de nuestra presentación de grafos con la utilizacón con interfaz grafica 
#                        mediante Tkinter. Muestra la ruta mas rapida entre todos los nodos que el usuario le ingrese. 
#
# **   By             : Dueñez Mejia Angel Gael y Vargas Reyes Frank Anthony
# **   Grupo          : 2CV13
# **   Materia        : Programación avanzada
##############################################################################



# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# :                    Importación de Módulos y Bibliotecas                    :
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
import tkinter as tk
from tkinter import messagebox
import networkx as nx
import matplotlib.pyplot as plt
from itertools import permutations



# ==============================================================================
# ||                                                                           ||
# ||                    P R O G R A M A  G E N E R A L                         ||
# ||                                                                           ||
# ==============================================================================
class Grafo:
    def __init__(self):
        self.grafo = nx.Graph()

    def agregar_arista(self, nodo1, nodo2, peso):
        self.grafo.add_edge(nodo1, nodo2, weight=peso)

    def mostrar_grafo(self):
        pos = nx.spring_layout(self.grafo)
        nx.draw(self.grafo, pos, with_labels=True, node_color='skyblue',
                node_size=2000, font_size=15, font_weight='bold')

        etiquetas = nx.get_edge_attributes(self.grafo, 'weight')
        nx.draw_networkx_edge_labels(self.grafo, pos, edge_labels=etiquetas)
        plt.show()

    def obtener_nodos(self):
        return list(self.grafo.nodes)

    def obtener_peso(self, nodo1, nodo2):
        return self.grafo[nodo1][nodo2]['weight'] if self.grafo.has_edge(nodo1, nodo2) else float('inf')


class Tsp:
    def __init__(self, grafo: Grafo):
        self.grafo = grafo

    def calcular_ruta_optima(self, inicio):
        nodos = self.grafo.obtener_nodos()
        if inicio not in nodos:
            raise ValueError("El nodo inicial no está en el grafo.")

        nodos.remove(inicio)
        mejor_ruta = None
        menor_peso = float('inf')

        for perm in permutations(nodos):
            ruta = [inicio] + list(perm) + [inicio]
            peso_total = 0
            valido = True

            for i in range(len(ruta) - 1):
                peso = self.grafo.obtener_peso(ruta[i], ruta[i + 1])
                if peso == float('inf'):
                    valido = False
                    break
                peso_total += peso

            if valido and peso_total < menor_peso:
                mejor_ruta = ruta
                menor_peso = peso_total

        return mejor_ruta, menor_peso


class RutaTiendas:
    def __init__(self):
        self.g = Grafo()
        self.nodo_inicial = ""

        self.ventana = tk.Tk()
        self.ventana.title("Ruta de tiendas")
        self.ventana.geometry("460x400")

        self.etiqueta_nodo_inicial = tk.Label(self.ventana, text="Ingresa el nodo inicial:", font=("Arial", 10))
        self.entrada_nodo_inicial = tk.Entry(self.ventana, width=30)

        self.etiqueta_arista = tk.Label(self.ventana, text="Agregar arista (nodo1 nodo2 peso):", font=("Arial", 10))
        self.entrada_arista = tk.Entry(self.ventana, width=30)

        self.boton_guardar_nodo = tk.Button(self.ventana, text="Guardar nodo inicial", command=self.guardar_nodo_inicial)
        self.boton_agregar_arista = tk.Button(self.ventana, text="Agregar arista", command=self.agregar_arista)

        self.etiqueta_resultado = tk.Label(self.ventana, text="", font=("Arial", 10), wraplength=350)

        self.boton_calcular_ruta = tk.Button(self.ventana, text="Calcular ruta óptima", command=self.calcular_ruta)
        self.boton_mostrar_grafo = tk.Button(self.ventana, text="Mostrar grafo", command=self.g.mostrar_grafo)

        self.etiqueta_nodo_inicial.pack(pady=5)
        self.entrada_nodo_inicial.pack(pady=5)
        self.boton_guardar_nodo.pack(pady=5)
        self.etiqueta_arista.pack(pady=5)
        self.entrada_arista.pack(pady=5)
        self.boton_agregar_arista.pack(pady=5)
        self.boton_calcular_ruta.pack(pady=10)
        self.boton_mostrar_grafo.pack(pady=5)
        self.etiqueta_resultado.pack(pady=10)

        self.ventana.mainloop()

    def guardar_nodo_inicial(self):
        valor = self.entrada_nodo_inicial.get()
        if valor:
            self.nodo_inicial = valor
            self.entrada_nodo_inicial.delete(0, tk.END)
            messagebox.showinfo("Nodo inicial", f"Nodo inicial '{valor}' guardado.")
        else:
            messagebox.showwarning("Advertencia", "Debes ingresar un nodo inicial.")

    def agregar_arista(self):
        entrada = self.entrada_arista.get()
        partes = entrada.split()
        if len(partes) != 3:
            messagebox.showwarning("Advertencia", "Formato inválido. Usa: nodo1 nodo2 peso")
            return
        nodo1, nodo2, peso = partes
        try:
            peso = int(peso)
            self.g.agregar_arista(nodo1, nodo2, peso)
            messagebox.showinfo("Arista agregada", f"Se agregó la arista {nodo1} <-> {nodo2} con peso {peso}")
            self.entrada_arista.delete(0, tk.END)
        except ValueError:
            messagebox.showerror("Error", "El peso debe ser un número entero.")

    def calcular_ruta(self):
        if not self.nodo_inicial:
            messagebox.showwarning("Advertencia", "Primero debes ingresar el nodo inicial.")
            return

        if self.nodo_inicial not in self.g.obtener_nodos():
            messagebox.showerror("Error", f"El nodo inicial '{self.nodo_inicial}' no existe en el grafo.")
            return

        viajante = Tsp(self.g)
        ruta, d = viajante.calcular_ruta_optima(self.nodo_inicial)

        if ruta:
            texto = f"Ruta más corta desde '{self.nodo_inicial}': {' -> '.join(ruta)}\nDistancia total del recorrido: {d} km"
        else:
            texto = "No se encontró una ruta válida que pase por todos los nodos."

        self.etiqueta_resultado.config(text=texto)



# ==============================================================================
# ||                                                                           ||
# ||        P R O G R A M A / F U N C I O N    P R I N C I P A L               ||
# ||                                                                           ||
# ==============================================================================
if __name__ == "__main__":
    RutaTiendas()
